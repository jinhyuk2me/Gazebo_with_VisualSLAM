<?xml version="1.0"?>
<robot name="smart_vehicle" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <!-- 매개변수들 -->
  <xacro:property name="chassis_length" value="2.0"/>
  <xacro:property name="chassis_width" value="1.0"/>
  <xacro:property name="chassis_height" value="0.5"/>
  <xacro:property name="chassis_mass" value="1.14395"/>
  
  <xacro:property name="wheel_radius" value="0.3"/>
  <xacro:property name="wheel_width" value="0.15"/>
  <xacro:property name="wheel_mass" value="2.0"/>
  <xacro:property name="wheel_separation" value="1.25"/>
  
  <xacro:property name="caster_radius" value="0.2"/>
  <xacro:property name="caster_mass" value="1.0"/>

  <!-- 매크로: 바퀴 -->
  <xacro:macro name="wheel" params="prefix reflect">
    <link name="${prefix}_wheel">
      <visual>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
        <material name="black">
          <color rgba="0.1 0.1 0.1 1"/>
        </material>
      </visual>
      <collision>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
        <surface>
          <friction>
            <ode>
              <mu>1.5</mu>
              <mu2>1.5</mu2>
              <slip1>0.01</slip1>
              <slip2>0.01</slip2>
            </ode>
          </friction>
        </surface>
      </collision>
      <inertial>
        <mass value="${wheel_mass}"/>
        <inertia ixx="0.145833" ixy="0" ixz="0" iyy="0.145833" iyz="0" izz="0.125"/>
      </inertial>
    </link>

    <joint name="${prefix}_wheel_joint" type="continuous">
      <parent link="chassis"/>
      <child link="${prefix}_wheel"/>
      <origin xyz="0.554283 ${reflect * wheel_separation/2} -0.025" rpy="-1.5707 0 0"/>
      <axis xyz="0 0 1"/>
    </joint>
  </xacro:macro>

  <!-- 베이스 링크 -->
  <link name="base_link"/>

  <!-- 차체 -->
  <link name="chassis">
    <visual>
      <geometry>
        <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
      </geometry>
      <material name="blue">
        <color rgba="0.2 0.5 0.8 1"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="${chassis_mass}"/>
      <inertia ixx="0.126164" ixy="0" ixz="0" iyy="0.416519" iyz="0" izz="0.481014"/>
    </inertial>
  </link>

  <joint name="base_joint" type="fixed">
    <parent link="base_link"/>
    <child link="chassis"/>
    <origin xyz="-0.151427 0 0.175"/>
  </joint>

  <!-- 바퀴들 -->
  <xacro:wheel prefix="left" reflect="1"/>
  <xacro:wheel prefix="right" reflect="-1"/>

  <!-- 캐스터 바퀴 -->
  <link name="caster">
    <visual>
      <geometry>
        <sphere radius="${caster_radius}"/>
      </geometry>
      <material name="gray">
        <color rgba="0.3 0.3 0.3 1"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <sphere radius="${caster_radius}"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="${caster_mass}"/>
      <inertia ixx="0.1" ixy="0" ixz="0" iyy="0.1" iyz="0" izz="0.1"/>
    </inertial>
  </link>

  <joint name="caster_joint" type="fixed">
    <parent link="chassis"/>
    <child link="caster"/>
    <origin xyz="-0.957138 0 -0.125"/>
  </joint>

  <!-- 카메라 -->
  <link name="camera_link">
    <visual>
      <geometry>
        <box size="0.1 0.1 0.1"/>
      </geometry>
      <material name="red">
        <color rgba="0.8 0.2 0.2 1"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="0.1 0.1 0.1"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.1"/>
      <inertia ixx="0.000166667" ixy="0" ixz="0" iyy="0.000166667" iyz="0" izz="0.000166667"/>
    </inertial>
  </link>

  <joint name="camera_joint" type="fixed">
    <parent link="chassis"/>
    <child link="camera_link"/>
    <origin xyz="1.0 0 0.5"/>
  </joint>

  <!-- Gazebo 플러그인들 -->
  <gazebo>
    <!-- 차동구동 플러그인 -->
    <plugin filename="gz-sim-diff-drive-system" name="gz::sim::systems::DiffDrive">
      <left_joint>left_wheel_joint</left_joint>
      <right_joint>right_wheel_joint</right_joint>
      <wheel_separation>${wheel_separation}</wheel_separation>
      <wheel_radius>${wheel_radius}</wheel_radius>
      <odom_publish_frequency>1</odom_publish_frequency>
      <topic>cmd_vel</topic>
      <odom_topic>odom</odom_topic>
      <frame_id>odom</frame_id>
      <child_frame_id>base_link</child_frame_id>
      <max_linear_acceleration>1</max_linear_acceleration>
      <min_linear_acceleration>-1</min_linear_acceleration>
      <max_angular_acceleration>2</max_angular_acceleration>
      <min_angular_acceleration>-2</min_angular_acceleration>
      <max_linear_velocity>0.5</max_linear_velocity>
      <min_linear_velocity>-0.5</min_linear_velocity>
      <max_angular_velocity>1</max_angular_velocity>
      <min_angular_velocity>-1</min_angular_velocity>
    </plugin>

    <!-- 조인트 상태 퍼블리셔 -->
    <plugin filename="gz-sim-joint-state-publisher-system" name="gz::sim::systems::JointStatePublisher">
      <topic>joint_states</topic>
    </plugin>

    <!-- 포즈 퍼블리셔 -->
    <plugin filename="gz-sim-pose-publisher-system" name="gz::sim::systems::PosePublisher">
      <publish_link_pose>true</publish_link_pose>
      <use_pose_vector_msg>true</use_pose_vector_msg>
      <static_publisher>true</static_publisher>
      <static_update_frequency>1</static_update_frequency>
    </plugin>
  </gazebo>

  <!-- Depth 카메라 센서 (Turtlebot3 예제 기반) -->
  <gazebo reference="camera_link">
    <sensor name="camera" type="depth">
      <camera>
        <horizontal_fov>1.047</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.1</near>
          <far>3.0</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <always_on>1</always_on>
      <update_rate>30</update_rate>
      <visualize>true</visualize>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <ros>
          <namespace></namespace>
          <remapping>image_raw:=camera/image_raw</remapping>
          <remapping>image_depth:=camera/depth/image_raw</remapping>
          <remapping>camera_info:=camera/camera_info</remapping>
          <remapping>camera_info_depth:=camera/depth/camera_info</remapping>
          <remapping>points:=camera/depth/points</remapping>
        </ros>
        <camera_name>camera</camera_name>
        <frame_name>camera_rgb_optical_frame</frame_name>
        <hack_baseline>0.07</hack_baseline>
      </plugin>
    </sensor>
  </gazebo>

  <!-- 재질 정의 -->
  <gazebo reference="chassis">
    <material>Gazebo/Blue</material>
  </gazebo>

  <gazebo reference="left_wheel">
    <material>Gazebo/Black</material>
  </gazebo>

  <gazebo reference="right_wheel">
    <material>Gazebo/Black</material>
  </gazebo>

  <gazebo reference="caster">
    <material>Gazebo/Gray</material>
  </gazebo>

  <gazebo reference="camera_link">
    <material>Gazebo/Red</material>
  </gazebo>

</robot>
